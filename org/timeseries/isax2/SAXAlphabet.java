package org.timeseries.isax2;

import java.util.Arrays;

/**
 * Implements alphabet component for SAX.
 *
 * @author DJAMEL
 *
 */
public final class SAXAlphabet {

    /**
     * Maximal possible alphabet size.
     */
    private static final int MAX_SIZE = 20;
    
    
    // sismique
//    private static final double[] case2 = {0};
//    private static final double[] case4 = {-7318.633333333334, 0.0, 7318.633333333334};
//    private static final double[] case8 = {-12565.110333333336, -7367.6791, -3480.6109333333334, 0.0, 3480.6109333333334, 7367.6791, 12565.110333333336};
//
//    private static final double[] case16 = {-16757.485666666667, -12565.110333333336, -9690.635166666667, -7367.6791, -5339.106866666666, -3480.6109333333334, -1718.3495666666668, 0.0, 1718.3495666666668, 3480.6109333333334, 5339.106866666666, 7367.6791, 9690.635166666667, 12565.110333333336, 16757.485666666667};
//
//    private static final double[] case32 = {-20346.893, -16757.485666666667, -14396.953333333333, -12565.110333333336, -11032.566666666666, -9690.635166666667, -8481.094466666667, -7367.6791, -6326.030033333333, -5339.106866666666, -4393.910833333333, -3480.6109333333334, -2591.0146666666665, -1718.3495666666668, -856.5204133333333, 0.0, 856.5204133333333, 1718.3495666666668, 2591.0146666666665, 3480.6109333333334, 4393.910833333333, 5339.106866666666, 6326.030033333333, 7367.6791, 8481.094466666667, 9690.635166666667, 11032.566666666666, 12565.110333333336, 14396.953333333333, 16757.485666666667, 20346.893};
//    private static final double[] case64 = {-23527.767666666667, -20346.893, -18306.41433333333, -16757.485666666667, -15487.101999999999, -14396.953333333333, -13434.607666666665, -12565.110333333336, -11769.891666666665, -11032.566666666666, -10341.993533333332, -9690.635166666667, -9071.937566666666, -8481.094466666667, -7914.0642333333335, -7367.6791, -6839.098999999999, -6326.030033333333, -5826.615233333334, -5339.106866666666, -4861.975666666666, -4393.910833333333, -3933.8200333333334, -3480.6109333333334, -3033.3004333333333, -2591.0146666666665, -2152.989, -1718.3495666666668, -1286.4409666666668, -856.5204133333333, -427.9325066666667, 0.0, 427.9325066666667, 856.5204133333333, 1286.4409666666668, 1718.3495666666668, 2152.989, 2591.0146666666665, 3033.3004333333333, 3480.6109333333334, 3933.8200333333334, 4393.910833333333, 4861.975666666666, 5339.106866666666, 5826.615233333334, 6326.030033333333, 6839.098999999999, 7367.6791, 7914.0642333333335, 8481.094466666667, 9071.937566666666, 9690.635166666667, 10341.993533333332, 11032.566666666666, 11769.891666666665, 12565.110333333336, 13434.607666666665, 14396.953333333333, 15487.101999999999, 16757.485666666667, 18306.41433333333, 20346.893, 23527.767666666667};
//
//    private static final double[] case128 = {-26408.25066666667, -23527.767666666667, -21709.03266666667, -20346.893, -19243.636333333332, -18306.41433333333, -17488.256666666664, -16757.485666666667, -16095.531666666668, -15487.101999999999, -14923.458, -14396.953333333333, -13902.126333333334, -13434.607666666665, -12990.028, -12565.110333333336, -12159.854666666666, -11769.891666666665, -11395.221333333333, -11032.566666666666, -10681.927666666666, -10341.993533333332, -10011.8904, -9690.635166666667, -9377.4632, -9071.937566666666, -8773.293633333333, -8481.094466666667, -8194.903133333333, -7914.0642333333335, -7638.468533333334, -7367.6791, -7101.259000000001, -6839.098999999999, -6580.762166666667, -6326.030033333333, -6074.793366666668, -5826.615233333334, -5581.495633333333, -5339.106866666666, -5099.3397, -4861.975666666666, -4626.905533333334, -4393.910833333333, -4162.991566666667, -3933.8200333333334, -3706.3962333333334, -3480.6109333333334, -3256.2456666666662, -3033.3004333333333, -2811.5567666666666, -2591.0146666666665, -2371.5649, -2152.989, -1935.2869666666666, -1718.3495666666668, -1502.0675666666666, -1286.4409666666668, -1071.2731466666667, -856.5204133333333, -642.1063033333334, -427.9325066666667, -213.92256, 0.0, 213.92256, 427.9325066666667, 642.1063033333334, 856.5204133333333, 1071.2731466666667, 1286.4409666666668, 1502.0675666666666, 1718.3495666666668, 1935.2869666666666, 2152.989, 2371.5649, 2591.0146666666665, 2811.5567666666666, 3033.3004333333333, 3256.2456666666662, 3480.6109333333334, 3706.3962333333334, 3933.8200333333334, 4162.991566666667, 4393.910833333333, 4626.905533333334, 4861.975666666666, 5099.3397, 5339.106866666666, 5581.495633333333, 5826.615233333334, 6074.793366666668, 6326.030033333333, 6580.762166666667, 6839.098999999999, 7101.259000000001, 7367.6791, 7638.468533333334, 7914.0642333333335, 8194.903133333333, 8481.094466666667, 8773.293633333333, 9071.937566666666, 9377.4632, 9690.635166666667, 10011.8904, 10341.993533333332, 10681.927666666666, 11032.566666666666, 11395.221333333333, 11769.891666666665, 12159.854666666666, 12565.110333333336, 12990.028, 13434.607666666665, 13902.126333333334, 14396.953333333333, 14923.458, 15487.101999999999, 16095.531666666668, 16757.485666666667, 17488.256666666664, 18306.41433333333, 19243.636333333332, 20346.893, 21709.03266666667, 23527.767666666667, 26408.25066666667};
//
//    private static final double[] case256 = {-29057.159, -26408.25066666667, -24754.458, -23527.767666666667, -22540.29833333333, -21709.03266666667, -20988.092666666667, -20346.893, -19770.141, -19243.636333333332, -18757.548, -18306.41433333333, -17884.773666666664, -17488.256666666664, -17113.586333333333, -16757.485666666667, -16418.862333333334, -16095.531666666668, -15785.309000000001, -15487.101999999999, -15199.818333333335, -14923.458, -14655.836333333333, -14396.953333333333, -14145.716666666665, -13902.126333333334, -13665.089999999998, -13434.607666666665, -13209.587, -12990.028, -12774.838333333333, -12565.110333333336, -12360.844, -12159.854666666666, -11963.234666666665, -11769.891666666665, -11580.918, -11395.221333333333, -11211.709333333332, -11032.566666666666, -10855.827133333334, -10681.927666666666, -10510.6498, -10341.993533333332, -10175.7404, -10011.8904, -9850.115833333335, -9690.635166666667, -9533.1207, -9377.4632, -9223.881133333332, -9071.937566666666, -8921.850966666667, -8773.293633333333, -8626.484033333334, -8481.094466666667, -8337.234166666667, -8194.903133333333, -8053.773666666667, -7914.0642333333335, -7775.6656, -7638.468533333334, -7502.473033333335, -7367.6791, -7233.9775, -7101.259000000001, -6969.742066666666, -6839.098999999999, -6709.439033333333, -6580.762166666667, -6452.9591666666665, -6326.030033333333, -6199.974766666667, -6074.793366666668, -5950.267366666667, -5826.615233333334, -5703.6185000000005, -5581.495633333333, -5459.918933333333, -5339.106866666666, -5218.840966666667, -5099.3397, -4980.275366666667, -4861.975666666666, -4744.112899999999, -4626.905533333334, -4510.1350999999995, -4393.910833333333, -4278.232733333333, -4162.991566666667, -4048.1873333333333, -3933.8200333333334, -3819.8896666666665, -3706.3962333333334, -3593.339733333333, -3480.6109333333334, -3368.209833333334, -3256.2456666666662, -3144.6092000000003, -3033.3004333333333, -2922.3193666666666, -2811.5567666666666, -2701.2311, -2591.0146666666665, -2481.1259333333333, -2371.5649, -2262.1131, -2152.989, -2044.0833666666665, -1935.2869666666666, -1826.7090333333333, -1718.3495666666668, -1610.0993333333333, -1502.0675666666666, -1394.2542666666668, -1286.4409666666668, -1178.8461333333332, -1071.2731466666667, -963.8530866666666, -856.5204133333333, -749.2751266666668, -642.1063033333334, -534.9920966666667, -427.9325066666667, -320.91661, -213.92256, -106.958003, 0.0, 106.958003, 213.92256, 320.91661, 427.9325066666667, 534.9920966666667, 642.1063033333334, 749.2751266666668, 856.5204133333333, 963.8530866666666, 1071.2731466666667, 1178.8461333333332, 1286.4409666666668, 1394.2542666666668, 1502.0675666666666, 1610.0993333333333, 1718.3495666666668, 1826.7090333333333, 1935.2869666666666, 2044.0833666666665, 2152.989, 2262.1131, 2371.5649, 2481.1259333333333, 2591.0146666666665, 2701.2311, 2811.5567666666666, 2922.3193666666666, 3033.3004333333333, 3144.6092000000003, 3256.2456666666662, 3368.209833333334, 3480.6109333333334, 3593.339733333333, 3706.3962333333334, 3819.8896666666665, 3933.8200333333334, 4048.1873333333333, 4162.991566666667, 4278.232733333333, 4393.910833333333, 4510.1350999999995, 4626.905533333334, 4744.112899999999, 4861.975666666666, 4980.275366666667, 5099.3397, 5218.840966666667, 5339.106866666666, 5459.918933333333, 5581.495633333333, 5703.6185000000005, 5826.615233333334, 5950.267366666667, 6074.793366666668, 6199.974766666667, 6326.030033333333, 6452.9591666666665, 6580.762166666667, 6709.439033333333, 6839.098999999999, 6969.742066666666, 7101.259000000001, 7233.9775, 7367.6791, 7502.473033333335, 7638.468533333334, 7775.6656, 7914.0642333333335, 8053.773666666667, 8194.903133333333, 8337.234166666667, 8481.094466666667, 8626.484033333334, 8773.293633333333, 8921.850966666667, 9071.937566666666, 9223.881133333332, 9377.4632, 9533.1207, 9690.635166666667, 9850.115833333335, 10011.8904, 10175.7404, 10341.993533333332, 10510.6498, 10681.927666666666, 10855.827133333334, 11032.566666666666, 11211.709333333332, 11395.221333333333, 11580.918, 11769.891666666665, 11963.234666666665, 12159.854666666666, 12360.844, 12565.110333333336, 12774.838333333333, 12990.028, 13209.587, 13434.607666666665, 13665.089999999998, 13902.126333333334, 14145.716666666665, 14396.953333333333, 14655.836333333333, 14923.458, 15199.818333333335, 15487.101999999999, 15785.309000000001, 16095.531666666668, 16418.862333333334, 16757.485666666667, 17113.586333333333, 17488.256666666664, 17884.773666666664, 18306.41433333333, 18757.548, 19243.636333333332, 19770.141, 20346.893, 20988.092666666667, 21709.03266666667, 22540.29833333333, 23527.767666666667, 24754.458, 26408.25066666667, 29057.159};
//
//    private static final double[] case512 = {-31520.37066666667, -29057.159, -27532.26166666667, -26408.25066666667, -25508.168, -24754.458, -24103.42733333333, -23527.767666666667, -23011.093999999997, -22540.29833333333, -22108.826666666664, -21709.03266666667, -21336.547000000002, -20988.092666666667, -20658.208, -20346.893, -20051.963, -19770.141, -19501.427, -19243.636333333332, -18995.67666666667, -18757.548, -18528.158, -18306.41433333333, -18092.317, -17884.773666666664, -17683.784333333333, -17488.256666666664, -17298.190666666665, -17113.586333333333, -16933.351333333336, -16757.485666666667, -16585.989333333335, -16418.862333333334, -16255.012333333332, -16095.531666666668, -15938.235666666667, -15785.309000000001, -15634.567000000001, -15487.101999999999, -15341.821666666669, -15199.818333333335, -15061.091999999999, -14923.458, -14789.101, -14655.836333333333, -14525.848666666667, -14396.953333333333, -14270.242666666667, -14145.716666666665, -14023.375333333335, -13902.126333333334, -13783.062, -13665.089999999998, -13549.302666666665, -13434.607666666665, -13321.005, -13209.587, -13099.261333333334, -12990.028, -12881.887, -12774.838333333333, -12669.974333333332, -12565.110333333336, -12462.430999999999, -12360.844, -12259.257, -12159.854666666666, -12060.452333333335, -11963.234666666665, -11866.017, -11769.891666666665, -11674.858666666667, -11580.918, -11486.977333333334, -11395.221333333333, -11303.465333333334, -11211.709333333332, -11122.137999999999, -11032.566666666666, -10944.087666666666, -10855.827133333334, -10768.5497, -10681.927666666666, -10595.961033333333, -10510.6498, -10425.993966666667, -10341.993533333332, -10258.648500000001, -10175.7404, -10093.4877, -10011.8904, -9930.730033333333, -9850.115833333335, -9770.157033333333, -9690.635166666667, -9611.550233333333, -9533.1207, -9455.018866666667, -9377.4632, -9300.4537, -9223.881133333332, -9147.636266666666, -9071.937566666666, -8996.675799999999, -8921.850966666667, -8847.353833333333, -8773.293633333333, -8699.670366666667, -8626.484033333334, -8553.625399999999, -8481.094466666667, -8409.000466666666, -8337.234166666667, -8265.904799999998, -8194.903133333333, -8124.1199333333325, -8053.773666666667, -7983.755100000001, -7914.0642333333335, -7844.701066666667, -7775.6656, -7706.957833333334, -7638.468533333334, -7570.416166666667, -7502.473033333335, -7434.966833333333, -7367.6791, -7300.719066666666, -7233.9775, -7167.4544, -7101.259000000001, -7035.3913, -6969.742066666666, -6904.3113, -6839.098999999999, -6774.105166666667, -6709.439033333333, -6644.991366666666, -6580.762166666667, -6516.751433333332, -6452.9591666666665, -6389.385366666666, -6326.030033333333, -6262.893166666668, -6199.974766666667, -6137.274833333333, -6074.793366666668, -6012.421133333333, -5950.267366666667, -5888.332066666666, -5826.615233333334, -5765.007633333334, -5703.6185000000005, -5642.447833333333, -5581.495633333333, -5520.652666666666, -5459.918933333333, -5399.403666666667, -5339.106866666666, -5278.9193, -5218.840966666667, -5158.9811, -5099.3397, -5039.6983, -4980.275366666667, -4921.0709, -4861.975666666666, -4802.989666666666, -4744.112899999999, -4685.4546, -4626.905533333334, -4568.4657, -4510.1350999999995, -4451.913733333333, -4393.910833333333, -4336.017166666667, -4278.232733333333, -4220.557533333334, -4162.991566666667, -4105.534833333334, -4048.1873333333333, -3990.9490666666666, -3933.8200333333334, -3876.8002333333334, -3819.8896666666665, -3763.088333333333, -3706.3962333333334, -3649.8133666666668, -3593.339733333333, -3536.8661000000006, -3480.6109333333334, -3424.355766666666, -3368.209833333334, -3312.173133333333, -3256.2456666666662, -3200.427433333333, -3144.6092000000003, -3088.9001999999996, -3033.3004333333333, -2977.8099, -2922.3193666666666, -2866.938066666667, -2811.5567666666666, -2756.3939333333333, -2701.2311, -2646.0682666666667, -2591.0146666666665, -2536.0703, -2481.1259333333333, -2426.2908, -2371.5649, -2316.8390000000004, -2262.1131, -2207.4964333333332, -2152.989, -2098.481566666667, -2044.0833666666665, -1989.6851666666669, -1935.2869666666666, -1880.9979999999998, -1826.7090333333333, -1772.5293, -1718.3495666666668, -1664.2790666666667, -1610.0993333333333, -1556.1380666666666, -1502.0675666666666, -1448.1063000000001, -1394.2542666666668, -1340.293, -1286.4409666666668, -1232.5889333333332, -1178.8461333333332, -1124.9941000000001, -1071.2731466666667, -1017.5521933333333, -963.8530866666666, -910.1758266666666, -856.5204133333333, -802.89777, -749.2751266666668, -695.6852533333332, -642.1063033333334, -588.5382766666668, -534.9920966666667, -481.45684, -427.9325066666667, -374.4190966666667, -320.91661, -267.4141233333333, -213.92256, -160.44192, -106.958003, -53.47845533333333, 0.0, 53.47845533333333, 106.958003, 160.44192, 213.92256, 267.4141233333333, 320.91661, 374.4190966666667, 427.9325066666667, 481.45684, 534.9920966666667, 588.5382766666668, 642.1063033333334, 695.6852533333332, 749.2751266666668, 802.89777, 856.5204133333333, 910.1758266666666, 963.8530866666666, 1017.5521933333333, 1071.2731466666667, 1124.9941000000001, 1178.8461333333332, 1232.5889333333332, 1286.4409666666668, 1340.293, 1394.2542666666668, 1448.1063000000001, 1502.0675666666666, 1556.1380666666666, 1610.0993333333333, 1664.2790666666667, 1718.3495666666668, 1772.5293, 1826.7090333333333, 1880.9979999999998, 1935.2869666666666, 1989.6851666666669, 2044.0833666666665, 2098.481566666667, 2152.989, 2207.4964333333332, 2262.1131, 2316.8390000000004, 2371.5649, 2426.2908, 2481.1259333333333, 2536.0703, 2591.0146666666665, 2646.0682666666667, 2701.2311, 2756.3939333333333, 2811.5567666666666, 2866.938066666667, 2922.3193666666666, 2977.8099, 3033.3004333333333, 3088.9001999999996, 3144.6092000000003, 3200.427433333333, 3256.2456666666662, 3312.173133333333, 3368.209833333334, 3424.355766666666, 3480.6109333333334, 3536.8661000000006, 3593.339733333333, 3649.8133666666668, 3706.3962333333334, 3763.088333333333, 3819.8896666666665, 3876.8002333333334, 3933.8200333333334, 3990.9490666666666, 4048.1873333333333, 4105.534833333334, 4162.991566666667, 4220.557533333334, 4278.232733333333, 4336.017166666667, 4393.910833333333, 4451.913733333333, 4510.1350999999995, 4568.4657, 4626.905533333334, 4685.4546, 4744.112899999999, 4802.989666666666, 4861.975666666666, 4921.0709, 4980.275366666667, 5039.6983, 5099.3397, 5158.9811, 5218.840966666667, 5278.9193, 5339.106866666666, 5399.403666666667, 5459.918933333333, 5520.652666666666, 5581.495633333333, 5642.447833333333, 5703.6185000000005, 5765.007633333334, 5826.615233333334, 5888.332066666666, 5950.267366666667, 6012.421133333333, 6074.793366666668, 6137.274833333333, 6199.974766666667, 6262.893166666668, 6326.030033333333, 6389.385366666666, 6452.9591666666665, 6516.751433333332, 6580.762166666667, 6644.991366666666, 6709.439033333333, 6774.105166666667, 6839.098999999999, 6904.3113, 6969.742066666666, 7035.3913, 7101.259000000001, 7167.4544, 7233.9775, 7300.719066666666, 7367.6791, 7434.966833333333, 7502.473033333335, 7570.416166666667, 7638.468533333334, 7706.957833333334, 7775.6656, 7844.701066666667, 7914.0642333333335, 7983.755100000001, 8053.773666666667, 8124.1199333333325, 8194.903133333333, 8265.904799999998, 8337.234166666667, 8409.000466666666, 8481.094466666667, 8553.625399999999, 8626.484033333334, 8699.670366666667, 8773.293633333333, 8847.353833333333, 8921.850966666667, 8996.675799999999, 9071.937566666666, 9147.636266666666, 9223.881133333332, 9300.4537, 9377.4632, 9455.018866666667, 9533.1207, 9611.550233333333, 9690.635166666667, 9770.157033333333, 9850.115833333335, 9930.730033333333, 10011.8904, 10093.4877, 10175.7404, 10258.648500000001, 10341.993533333332, 10425.993966666667, 10510.6498, 10595.961033333333, 10681.927666666666, 10768.5497, 10855.827133333334, 10944.087666666666, 11032.566666666666, 11122.137999999999, 11211.709333333332, 11303.465333333334, 11395.221333333333, 11486.977333333334, 11580.918, 11674.858666666667, 11769.891666666665, 11866.017, 11963.234666666665, 12060.452333333335, 12159.854666666666, 12259.257, 12360.844, 12462.430999999999, 12565.110333333336, 12669.974333333332, 12774.838333333333, 12881.887, 12990.028, 13099.261333333334, 13209.587, 13321.005, 13434.607666666665, 13549.302666666665, 13665.089999999998, 13783.062, 13902.126333333334, 14023.375333333335, 14145.716666666665, 14270.242666666667, 14396.953333333333, 14525.848666666667, 14655.836333333333, 14789.101, 14923.458, 15061.091999999999, 15199.818333333335, 15341.821666666669, 15487.101999999999, 15634.567000000001, 15785.309000000001, 15938.235666666667, 16095.531666666668, 16255.012333333332, 16418.862333333334, 16585.989333333335, 16757.485666666667, 16933.351333333336, 17113.586333333333, 17298.190666666665, 17488.256666666664, 17683.784333333333, 17884.773666666664, 18092.317, 18306.41433333333, 18528.158, 18757.548, 18995.67666666667, 19243.636333333332, 19501.427, 19770.141, 20051.963, 20346.893, 20658.208, 20988.092666666667, 21336.547000000002, 21709.03266666667, 22108.826666666664, 22540.29833333333, 23011.093999999997, 23527.767666666667, 24103.42733333333, 24754.458, 25508.168, 26408.25066666667, 27532.26166666667, 29057.159, 31520.37066666667};

    //rondemWalk
    
//        private static final double[] case2 = {0};
//    private static final double[] case4 = {-25.0, 0.0, 25.0};
//    private static final double[] case8 = {-42.0, -25.0, -11.0, 0.0, 11.0, 25.0, 42.0};
//
//    private static final double[] case16 = {-57.0, -42.0, -33.0, -25.0, -18.0, -11.0, -5.0, 0.0, 5.0, 11.0, 18.0, 25.0, 33.0, 42.0, 57.0};
//
//    private static final double[] case32 = {-69.0, -57.0, -49.0, -42.0, -37.0, -33.0, -28.0, -25.0, -21.0, -18.0, -15.0, -11.0, -8.0, -5.0, -2.0, 0.0, 2.0, 5.0, 8.0, 11.0, 15.0, 18.0, 21.0, 25.0, 28.0, 33.0, 37.0, 42.0, 49.0, 57.0, 69.0};
//    private static final double[] case64 = {-80.0, -69.0, -62.0, -57.0, -52.0, -49.0, -45.0, -42.0, -40.0, -37.0, -35.0, -33.0, -31.0, -28.0, -27.0, -25.0, -23.0, -21.0, -19.0, -18.0, -16.0, -15.0, -13.0, -11.0, -10.0, -8.0, -7.0, -5.0, -4.0, -2.0, -1.0, 0.0, 1.0, 2.0, 4.0, 5.0, 7.0, 8.0, 10.0, 11.0, 13.0, 15.0, 16.0, 18.0, 19.0, 21.0, 23.0, 25.0, 27.0, 28.0, 31.0, 33.0, 35.0, 37.0, 40.0, 42.0, 45.0, 49.0, 52.0, 57.0, 62.0, 69.0, 80.0};
//
//    private static final double[] case128 = {-90.0, -80.0, -74.0, -69.0, -65.0, -62.0, -59.0, -57.0, -55.0, -52.0, -51.0, -49.0, -47.0, -45.0, -44.0, -42.0, -41.0, -40.0, -38.0, -37.0, -36.0, -35.0, -34.0, -33.0, -32.0, -31.0, -29.0, -28.0, -28.0, -27.0, -26.0, -25.0, -24.0, -23.0, -22.0, -21.0, -20.0, -19.0, -19.0, -18.0, -17.0, -16.0, -15.0, -15.0, -14.0, -13.0, -12.0, -11.0, -11.0, -10.0, -9.0, -8.0, -8.0, -7.0, -6.0, -5.0, -5.0, -4.0, -3.0, -2.0, -2.0, -1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 2.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 8.0, 9.0, 10.0, 11.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 16.0, 17.0, 18.0, 19.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 28.0, 29.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 40.0, 41.0, 42.0, 44.0, 45.0, 47.0, 49.0, 51.0, 52.0, 55.0, 57.0, 59.0, 62.0, 65.0, 69.0, 74.0, 80.0, 90.0};
//
//    private static final double[] case256 = {-99.0, -90.0, -84.0, -80.0, -77.0, -74.0, -71.0, -69.0, -67.0, -65.0, -64.0, -62.0, -61.0, -59.0, -58.0, -57.0, -56.0, -55.0, -53.0, -52.0, -51.0, -51.0, -50.0, -49.0, -48.0, -47.0, -46.0, -45.0, -45.0, -44.0, -43.0, -42.0, -42.0, -41.0, -40.0, -40.0, -39.0, -38.0, -38.0, -37.0, -37.0, -36.0, -35.0, -35.0, -34.0, -34.0, -33.0, -33.0, -32.0, -32.0, -31.0, -31.0, -30.0, -29.0, -29.0, -28.0, -28.0, -28.0, -27.0, -27.0, -26.0, -26.0, -25.0, -25.0, -24.0, -24.0, -23.0, -23.0, -22.0, -22.0, -22.0, -21.0, -21.0, -20.0, -20.0, -19.0, -19.0, -19.0, -18.0, -18.0, -17.0, -17.0, -17.0, -16.0, -16.0, -15.0, -15.0, -15.0, -14.0, -14.0, -13.0, -13.0, -13.0, -12.0, -12.0, -11.0, -11.0, -11.0, -10.0, -10.0, -9.0, -9.0, -9.0, -8.0, -8.0, -8.0, -7.0, -7.0, -6.0, -6.0, -6.0, -5.0, -5.0, -5.0, -4.0, -4.0, -4.0, -3.0, -3.0, -2.0, -2.0, -2.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 7.0, 7.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 10.0, 10.0, 11.0, 11.0, 11.0, 12.0, 12.0, 13.0, 13.0, 13.0, 14.0, 14.0, 15.0, 15.0, 15.0, 16.0, 16.0, 17.0, 17.0, 17.0, 18.0, 18.0, 19.0, 19.0, 19.0, 20.0, 20.0, 21.0, 21.0, 22.0, 22.0, 22.0, 23.0, 23.0, 24.0, 24.0, 25.0, 25.0, 26.0, 26.0, 27.0, 27.0, 28.0, 28.0, 28.0, 29.0, 29.0, 30.0, 31.0, 31.0, 32.0, 32.0, 33.0, 33.0, 34.0, 34.0, 35.0, 35.0, 36.0, 37.0, 37.0, 38.0, 38.0, 39.0, 40.0, 40.0, 41.0, 42.0, 42.0, 43.0, 44.0, 45.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 51.0, 52.0, 53.0, 55.0, 56.0, 57.0, 58.0, 59.0, 61.0, 62.0, 64.0, 65.0, 67.0, 69.0, 71.0, 74.0, 77.0, 80.0, 84.0, 90.0, 99.0};
//
//    private static final double[] case512 = {-107.0, -99.0, -94.0, -90.0, -87.0, -84.0, -82.0, -80.0, -78.0, -77.0, -75.0, -74.0, -72.0, -71.0, -70.0, -69.0, -68.0, -67.0, -66.0, -65.0, -64.0, -64.0, -63.0, -62.0, -61.0, -61.0, -60.0, -59.0, -59.0, -58.0, -57.0, -57.0, -56.0, -56.0, -55.0, -55.0, -54.0, -53.0, -53.0, -52.0, -52.0, -51.0, -51.0, -51.0, -50.0, -50.0, -49.0, -49.0, -48.0, -48.0, -47.0, -47.0, -47.0, -46.0, -46.0, -45.0, -45.0, -45.0, -44.0, -44.0, -44.0, -43.0, -43.0, -42.0, -42.0, -42.0, -41.0, -41.0, -41.0, -40.0, -40.0, -40.0, -39.0, -39.0, -39.0, -38.0, -38.0, -38.0, -38.0, -37.0, -37.0, -37.0, -36.0, -36.0, -36.0, -35.0, -35.0, -35.0, -35.0, -34.0, -34.0, -34.0, -33.0, -33.0, -33.0, -33.0, -32.0, -32.0, -32.0, -32.0, -31.0, -31.0, -31.0, -31.0, -30.0, -30.0, -30.0, -29.0, -29.0, -29.0, -29.0, -28.0, -28.0, -28.0, -28.0, -28.0, -27.0, -27.0, -27.0, -27.0, -26.0, -26.0, -26.0, -26.0, -25.0, -25.0, -25.0, -25.0, -24.0, -24.0, -24.0, -24.0, -24.0, -23.0, -23.0, -23.0, -23.0, -22.0, -22.0, -22.0, -22.0, -22.0, -21.0, -21.0, -21.0, -21.0, -20.0, -20.0, -20.0, -20.0, -20.0, -19.0, -19.0, -19.0, -19.0, -19.0, -18.0, -18.0, -18.0, -18.0, -18.0, -17.0, -17.0, -17.0, -17.0, -17.0, -16.0, -16.0, -16.0, -16.0, -16.0, -15.0, -15.0, -15.0, -15.0, -15.0, -14.0, -14.0, -14.0, -14.0, -14.0, -13.0, -13.0, -13.0, -13.0, -13.0, -12.0, -12.0, -12.0, -12.0, -12.0, -11.0, -11.0, -11.0, -11.0, -11.0, -10.0, -10.0, -10.0, -10.0, -10.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -8.0, -8.0, -8.0, -8.0, -8.0, -7.0, -7.0, -7.0, -7.0, -7.0, -6.0, -6.0, -6.0, -6.0, -6.0, -6.0, -5.0, -5.0, -5.0, -5.0, -5.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -3.0, -3.0, -3.0, -3.0, -3.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 11.0, 11.0, 11.0, 11.0, 11.0, 12.0, 12.0, 12.0, 12.0, 12.0, 13.0, 13.0, 13.0, 13.0, 13.0, 14.0, 14.0, 14.0, 14.0, 14.0, 15.0, 15.0, 15.0, 15.0, 15.0, 16.0, 16.0, 16.0, 16.0, 16.0, 17.0, 17.0, 17.0, 17.0, 17.0, 18.0, 18.0, 18.0, 18.0, 18.0, 19.0, 19.0, 19.0, 19.0, 19.0, 20.0, 20.0, 20.0, 20.0, 20.0, 21.0, 21.0, 21.0, 21.0, 22.0, 22.0, 22.0, 22.0, 22.0, 23.0, 23.0, 23.0, 23.0, 24.0, 24.0, 24.0, 24.0, 24.0, 25.0, 25.0, 25.0, 25.0, 26.0, 26.0, 26.0, 26.0, 27.0, 27.0, 27.0, 27.0, 28.0, 28.0, 28.0, 28.0, 28.0, 29.0, 29.0, 29.0, 29.0, 30.0, 30.0, 30.0, 31.0, 31.0, 31.0, 31.0, 32.0, 32.0, 32.0, 32.0, 33.0, 33.0, 33.0, 33.0, 34.0, 34.0, 34.0, 35.0, 35.0, 35.0, 35.0, 36.0, 36.0, 36.0, 37.0, 37.0, 37.0, 38.0, 38.0, 38.0, 38.0, 39.0, 39.0, 39.0, 40.0, 40.0, 40.0, 41.0, 41.0, 41.0, 42.0, 42.0, 42.0, 43.0, 43.0, 44.0, 44.0, 44.0, 45.0, 45.0, 45.0, 46.0, 46.0, 47.0, 47.0, 47.0, 48.0, 48.0, 49.0, 49.0, 50.0, 50.0, 51.0, 51.0, 51.0, 52.0, 52.0, 53.0, 53.0, 54.0, 55.0, 55.0, 56.0, 56.0, 57.0, 57.0, 58.0, 59.0, 59.0, 60.0, 61.0, 61.0, 62.0, 63.0, 64.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 74.0, 75.0, 77.0, 78.0, 80.0, 82.0, 84.0, 87.0, 90.0, 94.0, 99.0, 107.0};
//
//    
    

    // cut intervals
    //
    private static final double[] case2 = {0};
    private static final double[] case3 = {-0.43073, 0.43073};
   private static final double[] case4 = {-0.67449, 0, 0.67449};
    private static final double[] case5 = {-0.84, -0.25, 0.25, 0.84};
    private static final double[] case6 = {-0.97, -0.43, 0.00, 0.43, 0.97};
    private static final double[] case7 = {-1.07, -0.57, -0.18, 0.18, 0.57, 1.07};
    private static final double[] case8 = {-1.1503, -0.67449, -0.31864, 0, 0.31864, 0.67449, 1.1503};
    private static final double[] case9 = {-1.22, -0.76, -0.43, -0.14, 0.14, 0.43, 0.76, 1.22};
    private static final double[] case10 = {-1.28, -0.84, -0.52, -0.25, 0.00, 0.25, 0.52,
                                            0.84, 1.28};
    private static final double[] case11 = {-1.34, -0.91, -0.6, -0.35, -0.11, 0.11, 0.35, 0.6, 0.91,
                                            1.34};
    private static final double[] case12 = {-1.38, -0.97, -0.67, -0.43, -0.21, 0.00, 0.21, 0.43,
                                            0.67, 0.97, 1.38};
    private static final double[] case13 = {-1.43, -1.02, -0.74, -0.5, -0.29, -0.1, 0.1, 0.29, 0.5,
                                            0.74, 1.02, 1.43};
    private static final double[] case14 = {-1.47, -1.07, -0.79, -0.57, -0.37, -0.18, 0.00, 0.18,
                                            0.37, 0.57, 0.79, 1.07, 1.47};
    private static final double[] case15 = {-1.5, -1.11, -0.84, -0.62, -0.43, -0.25, -0.08, 0.08,
                                            0.25, 0.43, 0.62, 0.84, 1.11, 1.5};
    private static final double[] case16 = {-1.5341, -1.1503, -0.88715, -0.67449, -0.48878, -0.31864, -0.15731, 0, 0.15731, 0.31864, 0.48878, 0.67449, 0.88715, 1.1503, 1.5341};
    private static final double[] case17 = {-1.56, -1.19, -0.93, -0.72, -0.54, -0.38, -0.22, -0.07,
                                            0.07, 0.22, 0.38, 0.54, 0.72, 0.93, 1.19, 1.56};
    private static final double[] case18 = {-1.59, -1.22, -0.97, -0.76, -0.59, -0.43, -0.28, -0.14,
                                            0.00, 0.14, 0.28, 0.43, 0.59, 0.76, 0.97, 1.22, 1.59};
    private static final double[] case19 = {-1.62, -1.25, -1, -0.8, -0.63, -0.48, -0.34, -0.2,
                                            -0.07, 0.07, 0.2, 0.34, 0.48, 0.63, 0.8, 1.00, 1.25, 1.62};
    private static final double[] case20 = {-1.64, -1.28, -1.04, -0.84, -0.67, -0.52, -0.39, -0.25,
                                            -0.13, 0.00, 0.13, 0.25, 0.39, 0.52, 0.67, 0.84, 1.04, 1.28, 1.64};
   private static final double[] case32 = {-1.8627, -1.5341, -1.318, -1.1503, -1.01, -0.88715, -0.77642, -0.67449, -0.57913, -0.48878, -0.40225, -0.31864, -0.2372, -0.15731, -0.078412, 0, 0.078412, 0.15731, 0.2372, 0.31864, 0.40225, 0.48878, 0.57913, 0.67449, 0.77642, 0.88715, 1.01, 1.1503, 1.318, 1.5341, 1.8627
    };
    private static final double[] case64 = {-2.1539, -1.8627, -1.6759, -1.5341, -1.4178, -1.318, -1.2299, -1.1503, -1.0775, -1.01, -0.94678, -0.88715, -0.83051, -0.77642, -0.72451, -0.67449, -0.6261, -0.57913, -0.53341, -0.48878, -0.4451, -0.40225, -0.36013, -0.31864, -0.27769, -0.2372, -0.1971, -0.15731, -0.11777, -0.078412, -0.039176, 0, 0.039176, 0.078412, 0.11777, 0.15731, 0.1971, 0.2372, 0.27769, 0.31864, 0.36013, 0.40225, 0.4451, 0.48878, 0.53341, 0.57913, 0.6261, 0.67449, 0.72451, 0.77642, 0.83051, 0.88715, 0.94678, 1.01, 1.0775, 1.1503, 1.2299, 1.318, 1.4178, 1.5341, 1.6759, 1.8627, 2.1539
    };

    private static final double[] case128 = {-2.4176, -2.1539, -1.9874, -1.8627, -1.7617, -1.6759, -1.601, -1.5341, -1.4735, -1.4178, -1.3662, -1.318, -1.2727, -1.2299, -1.1892, -1.1503, -1.1132, -1.0775, -1.0432, -1.01, -0.9779, -0.94678, -0.91656, -0.88715, -0.85848, -0.83051, -0.80317, -0.77642, -0.75022, -0.72451, -0.69928, -0.67449, -0.6501, -0.6261, -0.60245, -0.57913, -0.55613, -0.53341, -0.51097, -0.48878, -0.46683, -0.4451, -0.42358, -0.40225, -0.38111, -0.36013, -0.33931, -0.31864, -0.2981, -0.27769, -0.25739, -0.2372, -0.21711, -0.1971, -0.17717, -0.15731, -0.13751, -0.11777, -0.098072, -0.078412, -0.058783, -0.039176, -0.019584, 0, 0.019584, 0.039176, 0.058783, 0.078412, 0.098072, 0.11777, 0.13751, 0.15731, 0.17717, 0.1971, 0.21711, 0.2372, 0.25739, 0.27769, 0.2981, 0.31864, 0.33931, 0.36013, 0.38111, 0.40225, 0.42358, 0.4451, 0.46683, 0.48878, 0.51097, 0.53341, 0.55613, 0.57913, 0.60245, 0.6261, 0.6501, 0.67449, 0.69928, 0.72451, 0.75022, 0.77642, 0.80317, 0.83051, 0.85848, 0.88715, 0.91656, 0.94678, 0.9779, 1.01, 1.0432, 1.0775, 1.1132, 1.1503, 1.1892, 1.2299, 1.2727, 1.318, 1.3662, 1.4178, 1.4735, 1.5341, 1.601, 1.6759, 1.7617, 1.8627, 1.9874, 2.1539, 2.4176
  };

   private static final double[] case256 = {-2.6601, -2.4176, -2.2662, -2.1539, -2.0635, -1.9874, -1.9214, -1.8627, -1.8099, -1.7617, -1.7172, -1.6759, -1.6373, -1.601, -1.5667, -1.5341, -1.5031, -1.4735, -1.4451, -1.4178, -1.3915, -1.3662, -1.3417, -1.318, -1.295, -1.2727, -1.251, -1.2299, -1.2093, -1.1892, -1.1695, -1.1503, -1.1316, -1.1132, -1.0952, -1.0775, -1.0602, -1.0432, -1.0264, -1.01, -0.99382, -0.9779, -0.96222, -0.94678, -0.93156, -0.91656, -0.90175, -0.88715, -0.87273, -0.85848, -0.84442, -0.83051, -0.81677, -0.80317, -0.78973, -0.77642, -0.76325, -0.75022, -0.7373, -0.72451, -0.71184, -0.69928, -0.68683, -0.67449, -0.66225, -0.6501, -0.63806, -0.6261, -0.61423, -0.60245, -0.59075, -0.57913, -0.56759, -0.55613, -0.54473, -0.53341, -0.52215, -0.51097, -0.49984, -0.48878, -0.47777, -0.46683, -0.45593, -0.4451, -0.43431, -0.42358, -0.41289, -0.40225, -0.39166, -0.38111, -0.3706, -0.36013, -0.3497, -0.33931, -0.32896, -0.31864, -0.30835, -0.2981, -0.28788, -0.27769, -0.26753, -0.25739, -0.24729, -0.2372, -0.22714, -0.21711, -0.20709, -0.1971, -0.18713, -0.17717, -0.16723, -0.15731, -0.1474, -0.13751, -0.12764, -0.11777, -0.10792, -0.098072, -0.088238, -0.078412, -0.068594, -0.058783, -0.048977, -0.039176, -0.029379, -0.019584, -0.0097917, 0, 0.0097917, 0.019584, 0.029379, 0.039176, 0.048977, 0.058783, 0.068594, 0.078412, 0.088238, 0.098072, 0.10792, 0.11777, 0.12764, 0.13751, 0.1474, 0.15731, 0.16723, 0.17717, 0.18713, 0.1971, 0.20709, 0.21711, 0.22714, 0.2372, 0.24729, 0.25739, 0.26753, 0.27769, 0.28788, 0.2981, 0.30835, 0.31864, 0.32896, 0.33931, 0.3497, 0.36013, 0.3706, 0.38111, 0.39166, 0.40225, 0.41289, 0.42358, 0.43431, 0.4451, 0.45593, 0.46683, 0.47777, 0.48878, 0.49984, 0.51097, 0.52215, 0.53341, 0.54473, 0.55613, 0.56759, 0.57913, 0.59075, 0.60245, 0.61423, 0.6261, 0.63806, 0.6501, 0.66225, 0.67449, 0.68683, 0.69928, 0.71184, 0.72451, 0.7373, 0.75022, 0.76325, 0.77642, 0.78973, 0.80317, 0.81677, 0.83051, 0.84442, 0.85848, 0.87273, 0.88715, 0.90175, 0.91656, 0.93156, 0.94678, 0.96222, 0.9779, 0.99382, 1.01, 1.0264, 1.0432, 1.0602, 1.0775, 1.0952, 1.1132, 1.1316, 1.1503, 1.1695, 1.1892, 1.2093, 1.2299, 1.251, 1.2727, 1.295, 1.318, 1.3417, 1.3662, 1.3915, 1.4178, 1.4451, 1.4735, 1.5031, 1.5341, 1.5667, 1.601, 1.6373, 1.6759, 1.7172, 1.7617, 1.8099, 1.8627, 1.9214, 1.9874, 2.0635, 2.1539, 2.2662, 2.4176, 2.6601
   };

   private static final double[] case512 = {-2.8856, -2.6601, -2.5205, -2.4176, -2.3352, -2.2662, -2.2066, -2.1539, -2.1066, -2.0635, -2.024, -1.9874, -1.9533, -1.9214, -1.8912, -1.8627, -1.8357, -1.8099, -1.7853, -1.7617, -1.739, -1.7172, -1.6962, -1.6759, -1.6563, -1.6373, -1.6189, -1.601, -1.5836, -1.5667, -1.5502, -1.5341, -1.5184, -1.5031, -1.4881, -1.4735, -1.4591, -1.4451, -1.4313, -1.4178, -1.4045, -1.3915, -1.3788, -1.3662, -1.3539, -1.3417, -1.3298, -1.318, -1.3064, -1.295, -1.2838, -1.2727, -1.2618, -1.251, -1.2404, -1.2299, -1.2195, -1.2093, -1.1992, -1.1892, -1.1793, -1.1695, -1.1599, -1.1503, -1.1409, -1.1316, -1.1223, -1.1132, -1.1041, -1.0952, -1.0863, -1.0775, -1.0688, -1.0602, -1.0516, -1.0432, -1.0348, -1.0264, -1.0182, -1.01, -1.0019, -0.99382, -0.98583, -0.9779, -0.97003, -0.96222, -0.95447, -0.94678, -0.93915, -0.93156, -0.92403, -0.91656, -0.90913, -0.90175, -0.89443, -0.88715, -0.87991, -0.87273, -0.86558, -0.85848, -0.85143, -0.84442, -0.83744, -0.83051, -0.82362, -0.81677, -0.80995, -0.80317, -0.79643, -0.78973, -0.78306, -0.77642, -0.76982, -0.76325, -0.75672, -0.75022, -0.74374, -0.7373, -0.73089, -0.72451, -0.71816, -0.71184, -0.70555, -0.69928, -0.69305, -0.68683, -0.68065, -0.67449, -0.66836, -0.66225, -0.65616, -0.6501, -0.64407, -0.63806, -0.63207, -0.6261, -0.62015, -0.61423, -0.60833, -0.60245, -0.59659, -0.59075, -0.58493, -0.57913, -0.57335, -0.56759, -0.56185, -0.55613, -0.55042, -0.54473, -0.53906, -0.53341, -0.52777, -0.52215, -0.51655, -0.51097, -0.5054, -0.49984, -0.4943, -0.48878, -0.48327, -0.47777, -0.47229, -0.46683, -0.46137, -0.45593, -0.45051, -0.4451, -0.4397, -0.43431, -0.42894, -0.42358, -0.41823, -0.41289, -0.40756, -0.40225, -0.39695, -0.39166, -0.38638, -0.38111, -0.37585, -0.3706, -0.36536, -0.36013, -0.35491, -0.3497, -0.3445, -0.33931, -0.33413, -0.32896, -0.32379, -0.31864, -0.31349, -0.30835, -0.30322, -0.2981, -0.29299, -0.28788, -0.28278, -0.27769, -0.27261, -0.26753, -0.26246, -0.25739, -0.25234, -0.24729, -0.24224, -0.2372, -0.23217, -0.22714, -0.22212, -0.21711, -0.2121, -0.20709, -0.20209, -0.1971, -0.19211, -0.18713, -0.18215, -0.17717, -0.1722, -0.16723, -0.16227, -0.15731, -0.15236, -0.1474, -0.14246, -0.13751, -0.13257, -0.12764, -0.1227, -0.11777, -0.11284, -0.10792, -0.10299, -0.098072, -0.093154, -0.088238, -0.083324, -0.078412, -0.073503, -0.068594, -0.063688, -0.058783, -0.053879, -0.048977, -0.044076, -0.039176, -0.034277, -0.029379, -0.024481, -0.019584, -0.014688, -0.0097917, -0.0048958, 0, 0.0048958, 0.0097917, 0.014688, 0.019584, 0.024481, 0.029379, 0.034277, 0.039176, 0.044076, 0.048977, 0.053879, 0.058783, 0.063688, 0.068594, 0.073503, 0.078412, 0.083324, 0.088238, 0.093154, 0.098072, 0.10299, 0.10792, 0.11284, 0.11777, 0.1227, 0.12764, 0.13257, 0.13751, 0.14246, 0.1474, 0.15236, 0.15731, 0.16227, 0.16723, 0.1722, 0.17717, 0.18215, 0.18713, 0.19211, 0.1971, 0.20209, 0.20709, 0.2121, 0.21711, 0.22212, 0.22714, 0.23217, 0.2372, 0.24224, 0.24729, 0.25234, 0.25739, 0.26246, 0.26753, 0.27261, 0.27769, 0.28278, 0.28788, 0.29299, 0.2981, 0.30322, 0.30835, 0.31349, 0.31864, 0.32379, 0.32896, 0.33413, 0.33931, 0.3445, 0.3497, 0.35491, 0.36013, 0.36536, 0.3706, 0.37585, 0.38111, 0.38638, 0.39166, 0.39695, 0.40225, 0.40756, 0.41289, 0.41823, 0.42358, 0.42894, 0.43431, 0.4397, 0.4451, 0.45051, 0.45593, 0.46137, 0.46683, 0.47229, 0.47777, 0.48327, 0.48878, 0.4943, 0.49984, 0.5054, 0.51097, 0.51655, 0.52215, 0.52777, 0.53341, 0.53906, 0.54473, 0.55042, 0.55613, 0.56185, 0.56759, 0.57335, 0.57913, 0.58493, 0.59075, 0.59659, 0.60245, 0.60833, 0.61423, 0.62015, 0.6261, 0.63207, 0.63806, 0.64407, 0.6501, 0.65616, 0.66225, 0.66836, 0.67449, 0.68065, 0.68683, 0.69305, 0.69928, 0.70555, 0.71184, 0.71816, 0.72451, 0.73089, 0.7373, 0.74374, 0.75022, 0.75672, 0.76325, 0.76982, 0.77642, 0.78306, 0.78973, 0.79643, 0.80317, 0.80995, 0.81677, 0.82362, 0.83051, 0.83744, 0.84442, 0.85143, 0.85848, 0.86558, 0.87273, 0.87991, 0.88715, 0.89443, 0.90175, 0.90913, 0.91656, 0.92403, 0.93156, 0.93915, 0.94678, 0.95447, 0.96222, 0.97003, 0.9779, 0.98583, 0.99382, 1.0019, 1.01, 1.0182, 1.0264, 1.0348, 1.0432, 1.0516, 1.0602, 1.0688, 1.0775, 1.0863, 1.0952, 1.1041, 1.1132, 1.1223, 1.1316, 1.1409, 1.1503, 1.1599, 1.1695, 1.1793, 1.1892, 1.1992, 1.2093, 1.2195, 1.2299, 1.2404, 1.251, 1.2618, 1.2727, 1.2838, 1.295, 1.3064, 1.318, 1.3298, 1.3417, 1.3539, 1.3662, 1.3788, 1.3915, 1.4045, 1.4178, 1.4313, 1.4451, 1.4591, 1.4735, 1.4881, 1.5031, 1.5184, 1.5341, 1.5502, 1.5667, 1.5836, 1.601, 1.6189, 1.6373, 1.6563, 1.6759, 1.6962, 1.7172, 1.739, 1.7617, 1.7853, 1.8099, 1.8357, 1.8627, 1.8912, 1.9214, 1.9533, 1.9874, 2.024, 2.0635, 2.1066, 2.1539, 2.2066, 2.2662, 2.3352, 2.4176, 2.5205, 2.6601, 2.8856};

    private static final double[][] distance_case2 = {{0.000000, 0.000000},
                                                      {0.000000, 0.000000}};

    private static final double[][] distance_case3 = {{0.000000, 0.000000, 0.860000},
                                                      {0.000000, 0.000000, 0.000000}, {0.860000, 0.000000, 0.000000}};

    private static final double[][] distance_case4
            = {{0.000000, 0.000000, 0.670000, 1.340000}, {0.000000, 0.000000, 0.000000, 0.670000},
               {0.670000, 0.000000, 0.000000, 0.000000}, {1.340000, 0.670000, 0.000000, 0.000000}};

    private static final double[][] distance_case5 = {
        {0.000000, 0.000000, 0.590000, 1.090000, 1.680000},
        {0.000000, 0.000000, 0.000000, 0.500000, 1.090000},
        {0.590000, 0.000000, 0.000000, 0.000000, 0.590000},
        {1.090000, 0.500000, 0.000000, 0.000000, 0.000000},
        {1.680000, 1.090000, 0.590000, 0.000000, 0.000000}};

    private static final double[][] distance_case6
            = {{0.000000, 0.000000, 0.540000, 0.970000, 1.400000, 1.940000},
               {0.000000, 0.000000, 0.000000, 0.430000, 0.860000, 1.400000},
               {0.540000, 0.000000, 0.000000, 0.000000, 0.430000, 0.970000},
               {0.970000, 0.430000, 0.000000, 0.000000, 0.000000, 0.540000},
               {1.400000, 0.860000, 0.430000, 0.000000, 0.000000, 0.000000},
               {1.940000, 1.400000, 0.970000, 0.540000, 0.000000, 0.000000}};

    private static final double[][] distance_case7 = {
        {0.000000, 0.000000, 0.500000, 0.890000, 1.250000, 1.640000, 2.140000},
        {0.000000, 0.000000, 0.000000, 0.390000, 0.750000, 1.140000, 1.640000},
        {0.500000, 0.000000, 0.000000, 0.000000, 0.360000, 0.750000, 1.250000},
        {0.890000, 0.390000, 0.000000, 0.000000, 0.000000, 0.390000, 0.890000},
        {1.250000, 0.750000, 0.360000, 0.000000, 0.000000, 0.000000, 0.500000},
        {1.640000, 1.140000, 0.750000, 0.390000, 0.000000, 0.000000, 0.000000},
        {2.140000, 1.640000, 1.250000, 0.890000, 0.500000, 0.000000, 0.000000}};

    private static final double[][] distance_case8 = {
        {0.000000, 0.000000, 0.480000, 0.830000, 1.150000, 1.470000, 1.820000, 2.300000},
        {0.000000, 0.000000, 0.000000, 0.350000, 0.670000, 0.990000, 1.340000, 1.820000},
        {0.480000, 0.000000, 0.000000, 0.000000, 0.320000, 0.640000, 0.990000, 1.470000},
        {0.830000, 0.350000, 0.000000, 0.000000, 0.000000, 0.320000, 0.670000, 1.150000},
        {1.150000, 0.670000, 0.320000, 0.000000, 0.000000, 0.000000, 0.350000, 0.830000},
        {1.470000, 0.990000, 0.640000, 0.320000, 0.000000, 0.000000, 0.000000, 0.480000},
        {1.820000, 1.340000, 0.990000, 0.670000, 0.350000, 0.000000, 0.000000, 0.000000},
        {2.300000, 1.820000, 1.470000, 1.150000, 0.830000, 0.480000, 0.000000, 0.000000}};

    private static final double[][] distance_case9 = {
        {0.000000, 0.000000, 0.460000, 0.790000, 1.080000, 1.360000, 1.650000, 1.980000, 2.440000},
        {0.000000, 0.000000, 0.000000, 0.330000, 0.620000, 0.900000, 1.190000, 1.520000, 1.980000},
        {0.460000, 0.000000, 0.000000, 0.000000, 0.290000, 0.570000, 0.860000, 1.190000, 1.650000},
        {0.790000, 0.330000, 0.000000, 0.000000, 0.000000, 0.280000, 0.570000, 0.900000, 1.360000},
        {1.080000, 0.620000, 0.290000, 0.000000, 0.000000, 0.000000, 0.290000, 0.620000, 1.080000},
        {1.360000, 0.900000, 0.570000, 0.280000, 0.000000, 0.000000, 0.000000, 0.330000, 0.790000},
        {1.650000, 1.190000, 0.860000, 0.570000, 0.290000, 0.000000, 0.000000, 0.000000, 0.460000},
        {1.980000, 1.520000, 1.190000, 0.900000, 0.620000, 0.330000, 0.000000, 0.000000, 0.000000},
        {2.440000, 1.980000, 1.650000, 1.360000, 1.080000, 0.790000, 0.460000, 0.000000, 0.000000}};

    private static final double[][] distance_case10 = {
        {0.000000, 0.000000, 0.440000, 0.760000, 1.030000, 1.280000, 1.530000, 1.800000, 2.120000,
         2.560000},
        {0.000000, 0.000000, 0.000000, 0.320000, 0.590000, 0.840000, 1.090000, 1.360000, 1.680000,
         2.120000},
        {0.440000, 0.000000, 0.000000, 0.000000, 0.270000, 0.520000, 0.770000, 1.040000, 1.360000,
         1.800000},
        {0.760000, 0.320000, 0.000000, 0.000000, 0.000000, 0.250000, 0.500000, 0.770000, 1.090000,
         1.530000},
        {1.030000, 0.590000, 0.270000, 0.000000, 0.000000, 0.000000, 0.250000, 0.520000, 0.840000,
         1.280000},
        {1.280000, 0.840000, 0.520000, 0.250000, 0.000000, 0.000000, 0.000000, 0.270000, 0.590000,
         1.030000},
        {1.530000, 1.090000, 0.770000, 0.500000, 0.250000, 0.000000, 0.000000, 0.000000, 0.320000,
         0.760000},
        {1.800000, 1.360000, 1.040000, 0.770000, 0.520000, 0.270000, 0.000000, 0.000000, 0.000000,
         0.440000},
        {2.120000, 1.680000, 1.360000, 1.090000, 0.840000, 0.590000, 0.320000, 0.000000, 0.000000,
         0.000000},
        {2.560000, 2.120000, 1.800000, 1.530000, 1.280000, 1.030000, 0.760000, 0.440000, 0.000000,
         0.000000}};

    private static final double[][] distance_case11 = {
        {0.000000, 0.000000, 0.430000, 0.740000, 0.990000, 1.230000, 1.450000, 1.690000, 1.940000,
         2.250000, 2.680000},
        {0.000000, 0.000000, 0.000000, 0.310000, 0.560000, 0.800000, 1.020000, 1.260000, 1.510000,
         1.820000, 2.250000},
        {0.430000, 0.000000, 0.000000, 0.000000, 0.250000, 0.490000, 0.710000, 0.950000, 1.200000,
         1.510000, 1.940000},
        {0.740000, 0.310000, 0.000000, 0.000000, 0.000000, 0.240000, 0.460000, 0.700000, 0.950000,
         1.260000, 1.690000},
        {0.990000, 0.560000, 0.250000, 0.000000, 0.000000, 0.000000, 0.220000, 0.460000, 0.710000,
         1.020000, 1.450000},
        {1.230000, 0.800000, 0.490000, 0.240000, 0.000000, 0.000000, 0.000000, 0.240000, 0.490000,
         0.800000, 1.230000},
        {1.450000, 1.020000, 0.710000, 0.460000, 0.220000, 0.000000, 0.000000, 0.000000, 0.250000,
         0.560000, 0.990000},
        {1.690000, 1.260000, 0.950000, 0.700000, 0.460000, 0.240000, 0.000000, 0.000000, 0.000000,
         0.310000, 0.740000},
        {1.940000, 1.510000, 1.200000, 0.950000, 0.710000, 0.490000, 0.250000, 0.000000, 0.000000,
         0.000000, 0.430000},
        {2.250000, 1.820000, 1.510000, 1.260000, 1.020000, 0.800000, 0.560000, 0.310000, 0.000000,
         0.000000, 0.000000},
        {2.680000, 2.250000, 1.940000, 1.690000, 1.450000, 1.230000, 0.990000, 0.740000, 0.430000,
         0.000000, 0.000000}};

    private static final double[][] distance_case12 = {
        {0.000000, 0.000000, 0.410000, 0.710000, 0.950000, 1.170000, 1.380000, 1.590000, 1.810000,
         2.050000, 2.350000, 2.760000},
        {0.000000, 0.000000, 0.000000, 0.300000, 0.540000, 0.760000, 0.970000, 1.180000, 1.400000,
         1.640000, 1.940000, 2.350000},
        {0.410000, 0.000000, 0.000000, 0.000000, 0.240000, 0.460000, 0.670000, 0.880000, 1.100000,
         1.340000, 1.640000, 2.050000},
        {0.710000, 0.300000, 0.000000, 0.000000, 0.000000, 0.220000, 0.430000, 0.640000, 0.860000,
         1.100000, 1.400000, 1.810000},
        {0.950000, 0.540000, 0.240000, 0.000000, 0.000000, 0.000000, 0.210000, 0.420000, 0.640000,
         0.880000, 1.180000, 1.590000},
        {1.170000, 0.760000, 0.460000, 0.220000, 0.000000, 0.000000, 0.000000, 0.210000, 0.430000,
         0.670000, 0.970000, 1.380000},
        {1.380000, 0.970000, 0.670000, 0.430000, 0.210000, 0.000000, 0.000000, 0.000000, 0.220000,
         0.460000, 0.760000, 1.170000},
        {1.590000, 1.180000, 0.880000, 0.640000, 0.420000, 0.210000, 0.000000, 0.000000, 0.000000,
         0.240000, 0.540000, 0.950000},
        {1.810000, 1.400000, 1.100000, 0.860000, 0.640000, 0.430000, 0.220000, 0.000000, 0.000000,
         0.000000, 0.300000, 0.710000},
        {2.050000, 1.640000, 1.340000, 1.100000, 0.880000, 0.670000, 0.460000, 0.240000, 0.000000,
         0.000000, 0.000000, 0.410000},
        {2.350000, 1.940000, 1.640000, 1.400000, 1.180000, 0.970000, 0.760000, 0.540000, 0.300000,
         0.000000, 0.000000, 0.000000},
        {2.760000, 2.350000, 2.050000, 1.810000, 1.590000, 1.380000, 1.170000, 0.950000, 0.710000,
         0.410000, 0.000000, 0.000000}};

    private static final double[][] distance_case13 = {
        {0.000000, 0.000000, 0.410000, 0.690000, 0.930000, 1.140000, 1.330000, 1.530000, 1.720000,
         1.930000, 2.170000, 2.450000, 2.860000},
        {0.000000, 0.000000, 0.000000, 0.280000, 0.520000, 0.730000, 0.920000, 1.120000, 1.310000,
         1.520000, 1.760000, 2.040000, 2.450000},
        {0.410000, 0.000000, 0.000000, 0.000000, 0.240000, 0.450000, 0.640000, 0.840000, 1.030000,
         1.240000, 1.480000, 1.760000, 2.170000},
        {0.690000, 0.280000, 0.000000, 0.000000, 0.000000, 0.210000, 0.400000, 0.600000, 0.790000,
         1.000000, 1.240000, 1.520000, 1.930000},
        {0.930000, 0.520000, 0.240000, 0.000000, 0.000000, 0.000000, 0.190000, 0.390000, 0.580000,
         0.790000, 1.030000, 1.310000, 1.720000},
        {1.140000, 0.730000, 0.450000, 0.210000, 0.000000, 0.000000, 0.000000, 0.200000, 0.390000,
         0.600000, 0.840000, 1.120000, 1.530000},
        {1.330000, 0.920000, 0.640000, 0.400000, 0.190000, 0.000000, 0.000000, 0.000000, 0.190000,
         0.400000, 0.640000, 0.920000, 1.330000},
        {1.530000, 1.120000, 0.840000, 0.600000, 0.390000, 0.200000, 0.000000, 0.000000, 0.000000,
         0.210000, 0.450000, 0.730000, 1.140000},
        {1.720000, 1.310000, 1.030000, 0.790000, 0.580000, 0.390000, 0.190000, 0.000000, 0.000000,
         0.000000, 0.240000, 0.520000, 0.930000},
        {1.930000, 1.520000, 1.240000, 1.000000, 0.790000, 0.600000, 0.400000, 0.210000, 0.000000,
         0.000000, 0.000000, 0.280000, 0.690000},
        {2.170000, 1.760000, 1.480000, 1.240000, 1.030000, 0.840000, 0.640000, 0.450000, 0.240000,
         0.000000, 0.000000, 0.000000, 0.410000},
        {2.450000, 2.040000, 1.760000, 1.520000, 1.310000, 1.120000, 0.920000, 0.730000, 0.520000,
         0.280000, 0.000000, 0.000000, 0.000000},
        {2.860000, 2.450000, 2.170000, 1.930000, 1.720000, 1.530000, 1.330000, 1.140000, 0.930000,
         0.690000, 0.410000, 0.000000, 0.000000}};

    private static final double[][] distance_case14 = {
        {0.000000, 0.000000, 0.400000, 0.680000, 0.900000, 1.100000, 1.290000, 1.470000, 1.650000,
         1.840000, 2.040000, 2.260000, 2.540000, 2.940000},
        {0.000000, 0.000000, 0.000000, 0.280000, 0.500000, 0.700000, 0.890000, 1.070000, 1.250000,
         1.440000, 1.640000, 1.860000, 2.140000, 2.540000},
        {0.400000, 0.000000, 0.000000, 0.000000, 0.220000, 0.420000, 0.610000, 0.790000, 0.970000,
         1.160000, 1.360000, 1.580000, 1.860000, 2.260000},
        {0.680000, 0.280000, 0.000000, 0.000000, 0.000000, 0.200000, 0.390000, 0.570000, 0.750000,
         0.940000, 1.140000, 1.360000, 1.640000, 2.040000},
        {0.900000, 0.500000, 0.220000, 0.000000, 0.000000, 0.000000, 0.190000, 0.370000, 0.550000,
         0.740000, 0.940000, 1.160000, 1.440000, 1.840000},
        {1.100000, 0.700000, 0.420000, 0.200000, 0.000000, 0.000000, 0.000000, 0.180000, 0.360000,
         0.550000, 0.750000, 0.970000, 1.250000, 1.650000},
        {1.290000, 0.890000, 0.610000, 0.390000, 0.190000, 0.000000, 0.000000, 0.000000, 0.180000,
         0.370000, 0.570000, 0.790000, 1.070000, 1.470000},
        {1.470000, 1.070000, 0.790000, 0.570000, 0.370000, 0.180000, 0.000000, 0.000000, 0.000000,
         0.190000, 0.390000, 0.610000, 0.890000, 1.290000},
        {1.650000, 1.250000, 0.970000, 0.750000, 0.550000, 0.360000, 0.180000, 0.000000, 0.000000,
         0.000000, 0.200000, 0.420000, 0.700000, 1.100000},
        {1.840000, 1.440000, 1.160000, 0.940000, 0.740000, 0.550000, 0.370000, 0.190000, 0.000000,
         0.000000, 0.000000, 0.220000, 0.500000, 0.900000},
        {2.040000, 1.640000, 1.360000, 1.140000, 0.940000, 0.750000, 0.570000, 0.390000, 0.200000,
         0.000000, 0.000000, 0.000000, 0.280000, 0.680000},
        {2.260000, 1.860000, 1.580000, 1.360000, 1.160000, 0.970000, 0.790000, 0.610000, 0.420000,
         0.220000, 0.000000, 0.000000, 0.000000, 0.400000},
        {2.540000, 2.140000, 1.860000, 1.640000, 1.440000, 1.250000, 1.070000, 0.890000, 0.700000,
         0.500000, 0.280000, 0.000000, 0.000000, 0.000000},
        {2.940000, 2.540000, 2.260000, 2.040000, 1.840000, 1.650000, 1.470000, 1.290000, 1.100000,
         0.900000, 0.680000, 0.400000, 0.000000, 0.000000}};

    private static final double[][] distance_case15 = {
        {0.000000, 0.000000, 0.390000, 0.660000, 0.880000, 1.070000, 1.250000, 1.420000, 1.580000,
         1.750000, 1.930000, 2.120000, 2.340000, 2.610000, 3.000000},
        {0.000000, 0.000000, 0.000000, 0.270000, 0.490000, 0.680000, 0.860000, 1.030000, 1.190000,
         1.360000, 1.540000, 1.730000, 1.950000, 2.220000, 2.610000},
        {0.390000, 0.000000, 0.000000, 0.000000, 0.220000, 0.410000, 0.590000, 0.760000, 0.920000,
         1.090000, 1.270000, 1.460000, 1.680000, 1.950000, 2.340000},
        {0.660000, 0.270000, 0.000000, 0.000000, 0.000000, 0.190000, 0.370000, 0.540000, 0.700000,
         0.870000, 1.050000, 1.240000, 1.460000, 1.730000, 2.120000},
        {0.880000, 0.490000, 0.220000, 0.000000, 0.000000, 0.000000, 0.180000, 0.350000, 0.510000,
         0.680000, 0.860000, 1.050000, 1.270000, 1.540000, 1.930000},
        {1.070000, 0.680000, 0.410000, 0.190000, 0.000000, 0.000000, 0.000000, 0.170000, 0.330000,
         0.500000, 0.680000, 0.870000, 1.090000, 1.360000, 1.750000},
        {1.250000, 0.860000, 0.590000, 0.370000, 0.180000, 0.000000, 0.000000, 0.000000, 0.160000,
         0.330000, 0.510000, 0.700000, 0.920000, 1.190000, 1.580000},
        {1.420000, 1.030000, 0.760000, 0.540000, 0.350000, 0.170000, 0.000000, 0.000000, 0.000000,
         0.170000, 0.350000, 0.540000, 0.760000, 1.030000, 1.420000},
        {1.580000, 1.190000, 0.920000, 0.700000, 0.510000, 0.330000, 0.160000, 0.000000, 0.000000,
         0.000000, 0.180000, 0.370000, 0.590000, 0.860000, 1.250000},
        {1.750000, 1.360000, 1.090000, 0.870000, 0.680000, 0.500000, 0.330000, 0.170000, 0.000000,
         0.000000, 0.000000, 0.190000, 0.410000, 0.680000, 1.070000},
        {1.930000, 1.540000, 1.270000, 1.050000, 0.860000, 0.680000, 0.510000, 0.350000, 0.180000,
         0.000000, 0.000000, 0.000000, 0.220000, 0.490000, 0.880000},
        {2.120000, 1.730000, 1.460000, 1.240000, 1.050000, 0.870000, 0.700000, 0.540000, 0.370000,
         0.190000, 0.000000, 0.000000, 0.000000, 0.270000, 0.660000},
        {2.340000, 1.950000, 1.680000, 1.460000, 1.270000, 1.090000, 0.920000, 0.760000, 0.590000,
         0.410000, 0.220000, 0.000000, 0.000000, 0.000000, 0.390000},
        {2.610000, 2.220000, 1.950000, 1.730000, 1.540000, 1.360000, 1.190000, 1.030000, 0.860000,
         0.680000, 0.490000, 0.270000, 0.000000, 0.000000, 0.000000},
        {3.000000, 2.610000, 2.340000, 2.120000, 1.930000, 1.750000, 1.580000, 1.420000, 1.250000,
         1.070000, 0.880000, 0.660000, 0.390000, 0.000000, 0.000000}};

    private static final double[][] distance_case16 = {
        {0.000000, 0.000000, 0.380000, 0.640000, 0.860000, 1.040000, 1.210000, 1.370000, 1.530000,
         1.690000, 1.850000, 2.020000, 2.200000, 2.420000, 2.680000, 3.060000},
        {0.000000, 0.000000, 0.000000, 0.260000, 0.480000, 0.660000, 0.830000, 0.990000, 1.150000,
         1.310000, 1.470000, 1.640000, 1.820000, 2.040000, 2.300000, 2.680000},
        {0.380000, 0.000000, 0.000000, 0.000000, 0.220000, 0.400000, 0.570000, 0.730000, 0.890000,
         1.050000, 1.210000, 1.380000, 1.560000, 1.780000, 2.040000, 2.420000},
        {0.640000, 0.260000, 0.000000, 0.000000, 0.000000, 0.180000, 0.350000, 0.510000, 0.670000,
         0.830000, 0.990000, 1.160000, 1.340000, 1.560000, 1.820000, 2.200000},
        {0.860000, 0.480000, 0.220000, 0.000000, 0.000000, 0.000000, 0.170000, 0.330000, 0.490000,
         0.650000, 0.810000, 0.980000, 1.160000, 1.380000, 1.640000, 2.020000},
        {1.040000, 0.660000, 0.400000, 0.180000, 0.000000, 0.000000, 0.000000, 0.160000, 0.320000,
         0.480000, 0.640000, 0.810000, 0.990000, 1.210000, 1.470000, 1.850000},
        {1.210000, 0.830000, 0.570000, 0.350000, 0.170000, 0.000000, 0.000000, 0.000000, 0.160000,
         0.320000, 0.480000, 0.650000, 0.830000, 1.050000, 1.310000, 1.690000},
        {1.370000, 0.990000, 0.730000, 0.510000, 0.330000, 0.160000, 0.000000, 0.000000, 0.000000,
         0.160000, 0.320000, 0.490000, 0.670000, 0.890000, 1.150000, 1.530000},
        {1.530000, 1.150000, 0.890000, 0.670000, 0.490000, 0.320000, 0.160000, 0.000000, 0.000000,
         0.000000, 0.160000, 0.330000, 0.510000, 0.730000, 0.990000, 1.370000},
        {1.690000, 1.310000, 1.050000, 0.830000, 0.650000, 0.480000, 0.320000, 0.160000, 0.000000,
         0.000000, 0.000000, 0.170000, 0.350000, 0.570000, 0.830000, 1.210000},
        {1.850000, 1.470000, 1.210000, 0.990000, 0.810000, 0.640000, 0.480000, 0.320000, 0.160000,
         0.000000, 0.000000, 0.000000, 0.180000, 0.400000, 0.660000, 1.040000},
        {2.020000, 1.640000, 1.380000, 1.160000, 0.980000, 0.810000, 0.650000, 0.490000, 0.330000,
         0.170000, 0.000000, 0.000000, 0.000000, 0.220000, 0.480000, 0.860000},
        {2.200000, 1.820000, 1.560000, 1.340000, 1.160000, 0.990000, 0.830000, 0.670000, 0.510000,
         0.350000, 0.180000, 0.000000, 0.000000, 0.000000, 0.260000, 0.640000},
        {2.420000, 2.040000, 1.780000, 1.560000, 1.380000, 1.210000, 1.050000, 0.890000, 0.730000,
         0.570000, 0.400000, 0.220000, 0.000000, 0.000000, 0.000000, 0.380000},
        {2.680000, 2.300000, 2.040000, 1.820000, 1.640000, 1.470000, 1.310000, 1.150000, 0.990000,
         0.830000, 0.660000, 0.480000, 0.260000, 0.000000, 0.000000, 0.000000},
        {3.060000, 2.680000, 2.420000, 2.200000, 2.020000, 1.850000, 1.690000, 1.530000, 1.370000,
         1.210000, 1.040000, 0.860000, 0.640000, 0.380000, 0.000000, 0.000000}};

    private static final double[][] distance_case17 = {
        {0.000000, 0.000000, 0.370000, 0.630000, 0.840000, 1.020000, 1.180000, 1.340000, 1.490000,
         1.630000, 1.780000, 1.940000, 2.100000, 2.280000, 2.490000, 2.750000, 3.120000},
        {0.000000, 0.000000, 0.000000, 0.260000, 0.470000, 0.650000, 0.810000, 0.970000, 1.120000,
         1.260000, 1.410000, 1.570000, 1.730000, 1.910000, 2.120000, 2.380000, 2.750000},
        {0.370000, 0.000000, 0.000000, 0.000000, 0.210000, 0.390000, 0.550000, 0.710000, 0.860000,
         1.000000, 1.150000, 1.310000, 1.470000, 1.650000, 1.860000, 2.120000, 2.490000},
        {0.630000, 0.260000, 0.000000, 0.000000, 0.000000, 0.180000, 0.340000, 0.500000, 0.650000,
         0.790000, 0.940000, 1.100000, 1.260000, 1.440000, 1.650000, 1.910000, 2.280000},
        {0.840000, 0.470000, 0.210000, 0.000000, 0.000000, 0.000000, 0.160000, 0.320000, 0.470000,
         0.610000, 0.760000, 0.920000, 1.080000, 1.260000, 1.470000, 1.730000, 2.100000},
        {1.020000, 0.650000, 0.390000, 0.180000, 0.000000, 0.000000, 0.000000, 0.160000, 0.310000,
         0.450000, 0.600000, 0.760000, 0.920000, 1.100000, 1.310000, 1.570000, 1.940000},
        {1.180000, 0.810000, 0.550000, 0.340000, 0.160000, 0.000000, 0.000000, 0.000000, 0.150000,
         0.290000, 0.440000, 0.600000, 0.760000, 0.940000, 1.150000, 1.410000, 1.780000},
        {1.340000, 0.970000, 0.710000, 0.500000, 0.320000, 0.160000, 0.000000, 0.000000, 0.000000,
         0.140000, 0.290000, 0.450000, 0.610000, 0.790000, 1.000000, 1.260000, 1.630000},
        {1.490000, 1.120000, 0.860000, 0.650000, 0.470000, 0.310000, 0.150000, 0.000000, 0.000000,
         0.000000, 0.150000, 0.310000, 0.470000, 0.650000, 0.860000, 1.120000, 1.490000},
        {1.630000, 1.260000, 1.000000, 0.790000, 0.610000, 0.450000, 0.290000, 0.140000, 0.000000,
         0.000000, 0.000000, 0.160000, 0.320000, 0.500000, 0.710000, 0.970000, 1.340000},
        {1.780000, 1.410000, 1.150000, 0.940000, 0.760000, 0.600000, 0.440000, 0.290000, 0.150000,
         0.000000, 0.000000, 0.000000, 0.160000, 0.340000, 0.550000, 0.810000, 1.180000},
        {1.940000, 1.570000, 1.310000, 1.100000, 0.920000, 0.760000, 0.600000, 0.450000, 0.310000,
         0.160000, 0.000000, 0.000000, 0.000000, 0.180000, 0.390000, 0.650000, 1.020000},
        {2.100000, 1.730000, 1.470000, 1.260000, 1.080000, 0.920000, 0.760000, 0.610000, 0.470000,
         0.320000, 0.160000, 0.000000, 0.000000, 0.000000, 0.210000, 0.470000, 0.840000},
        {2.280000, 1.910000, 1.650000, 1.440000, 1.260000, 1.100000, 0.940000, 0.790000, 0.650000,
         0.500000, 0.340000, 0.180000, 0.000000, 0.000000, 0.000000, 0.260000, 0.630000},
        {2.490000, 2.120000, 1.860000, 1.650000, 1.470000, 1.310000, 1.150000, 1.000000, 0.860000,
         0.710000, 0.550000, 0.390000, 0.210000, 0.000000, 0.000000, 0.000000, 0.370000},
        {2.750000, 2.380000, 2.120000, 1.910000, 1.730000, 1.570000, 1.410000, 1.260000, 1.120000,
         0.970000, 0.810000, 0.650000, 0.470000, 0.260000, 0.000000, 0.000000, 0.000000},
        {3.120000, 2.750000, 2.490000, 2.280000, 2.100000, 1.940000, 1.780000, 1.630000, 1.490000,
         1.340000, 1.180000, 1.020000, 0.840000, 0.630000, 0.370000, 0.000000, 0.000000}};

    private static final double[][] distance_case18 = {
        {0.000000, 0.000000, 0.370000, 0.620000, 0.830000, 1.000000, 1.160000, 1.310000, 1.450000,
         1.590000, 1.730000, 1.870000, 2.020000, 2.180000, 2.350000, 2.560000, 2.810000, 3.180000},
        {0.000000, 0.000000, 0.000000, 0.250000, 0.460000, 0.630000, 0.790000, 0.940000, 1.080000,
         1.220000, 1.360000, 1.500000, 1.650000, 1.810000, 1.980000, 2.190000, 2.440000, 2.810000},
        {0.370000, 0.000000, 0.000000, 0.000000, 0.210000, 0.380000, 0.540000, 0.690000, 0.830000,
         0.970000, 1.110000, 1.250000, 1.400000, 1.560000, 1.730000, 1.940000, 2.190000, 2.560000},
        {0.620000, 0.250000, 0.000000, 0.000000, 0.000000, 0.170000, 0.330000, 0.480000, 0.620000,
         0.760000, 0.900000, 1.040000, 1.190000, 1.350000, 1.520000, 1.730000, 1.980000, 2.350000},
        {0.830000, 0.460000, 0.210000, 0.000000, 0.000000, 0.000000, 0.160000, 0.310000, 0.450000,
         0.590000, 0.730000, 0.870000, 1.020000, 1.180000, 1.350000, 1.560000, 1.810000, 2.180000},
        {1.000000, 0.630000, 0.380000, 0.170000, 0.000000, 0.000000, 0.000000, 0.150000, 0.290000,
         0.430000, 0.570000, 0.710000, 0.860000, 1.020000, 1.190000, 1.400000, 1.650000, 2.020000},
        {1.160000, 0.790000, 0.540000, 0.330000, 0.160000, 0.000000, 0.000000, 0.000000, 0.140000,
         0.280000, 0.420000, 0.560000, 0.710000, 0.870000, 1.040000, 1.250000, 1.500000, 1.870000},
        {1.310000, 0.940000, 0.690000, 0.480000, 0.310000, 0.150000, 0.000000, 0.000000, 0.000000,
         0.140000, 0.280000, 0.420000, 0.570000, 0.730000, 0.900000, 1.110000, 1.360000, 1.730000},
        {1.450000, 1.080000, 0.830000, 0.620000, 0.450000, 0.290000, 0.140000, 0.000000, 0.000000,
         0.000000, 0.140000, 0.280000, 0.430000, 0.590000, 0.760000, 0.970000, 1.220000, 1.590000},
        {1.590000, 1.220000, 0.970000, 0.760000, 0.590000, 0.430000, 0.280000, 0.140000, 0.000000,
         0.000000, 0.000000, 0.140000, 0.290000, 0.450000, 0.620000, 0.830000, 1.080000, 1.450000},
        {1.730000, 1.360000, 1.110000, 0.900000, 0.730000, 0.570000, 0.420000, 0.280000, 0.140000,
         0.000000, 0.000000, 0.000000, 0.150000, 0.310000, 0.480000, 0.690000, 0.940000, 1.310000},
        {1.870000, 1.500000, 1.250000, 1.040000, 0.870000, 0.710000, 0.560000, 0.420000, 0.280000,
         0.140000, 0.000000, 0.000000, 0.000000, 0.160000, 0.330000, 0.540000, 0.790000, 1.160000},
        {2.020000, 1.650000, 1.400000, 1.190000, 1.020000, 0.860000, 0.710000, 0.570000, 0.430000,
         0.290000, 0.150000, 0.000000, 0.000000, 0.000000, 0.170000, 0.380000, 0.630000, 1.000000},
        {2.180000, 1.810000, 1.560000, 1.350000, 1.180000, 1.020000, 0.870000, 0.730000, 0.590000,
         0.450000, 0.310000, 0.160000, 0.000000, 0.000000, 0.000000, 0.210000, 0.460000, 0.830000},
        {2.350000, 1.980000, 1.730000, 1.520000, 1.350000, 1.190000, 1.040000, 0.900000, 0.760000,
         0.620000, 0.480000, 0.330000, 0.170000, 0.000000, 0.000000, 0.000000, 0.250000, 0.620000},
        {2.560000, 2.190000, 1.940000, 1.730000, 1.560000, 1.400000, 1.250000, 1.110000, 0.970000,
         0.830000, 0.690000, 0.540000, 0.380000, 0.210000, 0.000000, 0.000000, 0.000000, 0.370000},
        {2.810000, 2.440000, 2.190000, 1.980000, 1.810000, 1.650000, 1.500000, 1.360000, 1.220000,
         1.080000, 0.940000, 0.790000, 0.630000, 0.460000, 0.250000, 0.000000, 0.000000, 0.000000},
        {3.180000, 2.810000, 2.560000, 2.350000, 2.180000, 2.020000, 1.870000, 1.730000, 1.590000,
         1.450000, 1.310000, 1.160000, 1.000000, 0.830000, 0.620000, 0.370000, 0.000000, 0.000000}};

    private static final double[][] distance_case19 = {
        {0.000000, 0.000000, 0.370000, 0.620000, 0.820000, 0.990000, 1.140000, 1.280000, 1.420000,
         1.550000, 1.690000, 1.820000, 1.960000, 2.100000, 2.250000, 2.420000, 2.620000, 2.870000,
         3.240000},
        {0.000000, 0.000000, 0.000000, 0.250000, 0.450000, 0.620000, 0.770000, 0.910000, 1.050000,
         1.180000, 1.320000, 1.450000, 1.590000, 1.730000, 1.880000, 2.050000, 2.250000, 2.500000,
         2.870000},
        {0.370000, 0.000000, 0.000000, 0.000000, 0.200000, 0.370000, 0.520000, 0.660000, 0.800000,
         0.930000, 1.070000, 1.200000, 1.340000, 1.480000, 1.630000, 1.800000, 2.000000, 2.250000,
         2.620000},
        {0.620000, 0.250000, 0.000000, 0.000000, 0.000000, 0.170000, 0.320000, 0.460000, 0.600000,
         0.730000, 0.870000, 1.000000, 1.140000, 1.280000, 1.430000, 1.600000, 1.800000, 2.050000,
         2.420000},
        {0.820000, 0.450000, 0.200000, 0.000000, 0.000000, 0.000000, 0.150000, 0.290000, 0.430000,
         0.560000, 0.700000, 0.830000, 0.970000, 1.110000, 1.260000, 1.430000, 1.630000, 1.880000,
         2.250000},
        {0.990000, 0.620000, 0.370000, 0.170000, 0.000000, 0.000000, 0.000000, 0.140000, 0.280000,
         0.410000, 0.550000, 0.680000, 0.820000, 0.960000, 1.110000, 1.280000, 1.480000, 1.730000,
         2.100000},
        {1.140000, 0.770000, 0.520000, 0.320000, 0.150000, 0.000000, 0.000000, 0.000000, 0.140000,
         0.270000, 0.410000, 0.540000, 0.680000, 0.820000, 0.970000, 1.140000, 1.340000, 1.590000,
         1.960000},
        {1.280000, 0.910000, 0.660000, 0.460000, 0.290000, 0.140000, 0.000000, 0.000000, 0.000000,
         0.130000, 0.270000, 0.400000, 0.540000, 0.680000, 0.830000, 1.000000, 1.200000, 1.450000,
         1.820000},
        {1.420000, 1.050000, 0.800000, 0.600000, 0.430000, 0.280000, 0.140000, 0.000000, 0.000000,
         0.000000, 0.140000, 0.270000, 0.410000, 0.550000, 0.700000, 0.870000, 1.070000, 1.320000,
         1.690000},
        {1.550000, 1.180000, 0.930000, 0.730000, 0.560000, 0.410000, 0.270000, 0.130000, 0.000000,
         0.000000, 0.000000, 0.130000, 0.270000, 0.410000, 0.560000, 0.730000, 0.930000, 1.180000,
         1.550000},
        {1.690000, 1.320000, 1.070000, 0.870000, 0.700000, 0.550000, 0.410000, 0.270000, 0.140000,
         0.000000, 0.000000, 0.000000, 0.140000, 0.280000, 0.430000, 0.600000, 0.800000, 1.050000,
         1.420000},
        {1.820000, 1.450000, 1.200000, 1.000000, 0.830000, 0.680000, 0.540000, 0.400000, 0.270000,
         0.130000, 0.000000, 0.000000, 0.000000, 0.140000, 0.290000, 0.460000, 0.660000, 0.910000,
         1.280000},
        {1.960000, 1.590000, 1.340000, 1.140000, 0.970000, 0.820000, 0.680000, 0.540000, 0.410000,
         0.270000, 0.140000, 0.000000, 0.000000, 0.000000, 0.150000, 0.320000, 0.520000, 0.770000,
         1.140000},
        {2.100000, 1.730000, 1.480000, 1.280000, 1.110000, 0.960000, 0.820000, 0.680000, 0.550000,
         0.410000, 0.280000, 0.140000, 0.000000, 0.000000, 0.000000, 0.170000, 0.370000, 0.620000,
         0.990000},
        {2.250000, 1.880000, 1.630000, 1.430000, 1.260000, 1.110000, 0.970000, 0.830000, 0.700000,
         0.560000, 0.430000, 0.290000, 0.150000, 0.000000, 0.000000, 0.000000, 0.200000, 0.450000,
         0.820000},
        {2.420000, 2.050000, 1.800000, 1.600000, 1.430000, 1.280000, 1.140000, 1.000000, 0.870000,
         0.730000, 0.600000, 0.460000, 0.320000, 0.170000, 0.000000, 0.000000, 0.000000, 0.250000,
         0.620000},
        {2.620000, 2.250000, 2.000000, 1.800000, 1.630000, 1.480000, 1.340000, 1.200000, 1.070000,
         0.930000, 0.800000, 0.660000, 0.520000, 0.370000, 0.200000, 0.000000, 0.000000, 0.000000,
         0.370000},
        {2.870000, 2.500000, 2.250000, 2.050000, 1.880000, 1.730000, 1.590000, 1.450000, 1.320000,
         1.180000, 1.050000, 0.910000, 0.770000, 0.620000, 0.450000, 0.250000, 0.000000, 0.000000,
         0.000000},
        {3.240000, 2.870000, 2.620000, 2.420000, 2.250000, 2.100000, 1.960000, 1.820000, 1.690000,
         1.550000, 1.420000, 1.280000, 1.140000, 0.990000, 0.820000, 0.620000, 0.370000, 0.000000,
         0.000000}};

    private static final double[][] distance_case20 = {
        {0.000000, 0.000000, 0.360000, 0.600000, 0.800000, 0.970000, 1.120000, 1.250000, 1.390000,
         1.510000, 1.640000, 1.770000, 1.890000, 2.030000, 2.160000, 2.310000, 2.480000, 2.680000,
         2.920000, 3.280000},
        {0.000000, 0.000000, 0.000000, 0.240000, 0.440000, 0.610000, 0.760000, 0.890000, 1.030000,
         1.150000, 1.280000, 1.410000, 1.530000, 1.670000, 1.800000, 1.950000, 2.120000, 2.320000,
         2.560000, 2.920000},
        {0.360000, 0.000000, 0.000000, 0.000000, 0.200000, 0.370000, 0.520000, 0.650000, 0.790000,
         0.910000, 1.040000, 1.170000, 1.290000, 1.430000, 1.560000, 1.710000, 1.880000, 2.080000,
         2.320000, 2.680000},
        {0.600000, 0.240000, 0.000000, 0.000000, 0.000000, 0.170000, 0.320000, 0.450000, 0.590000,
         0.710000, 0.840000, 0.970000, 1.090000, 1.230000, 1.360000, 1.510000, 1.680000, 1.880000,
         2.120000, 2.480000},
        {0.800000, 0.440000, 0.200000, 0.000000, 0.000000, 0.000000, 0.150000, 0.280000, 0.420000,
         0.540000, 0.670000, 0.800000, 0.920000, 1.060000, 1.190000, 1.340000, 1.510000, 1.710000,
         1.950000, 2.310000},
        {0.970000, 0.610000, 0.370000, 0.170000, 0.000000, 0.000000, 0.000000, 0.130000, 0.270000,
         0.390000, 0.520000, 0.650000, 0.770000, 0.910000, 1.040000, 1.190000, 1.360000, 1.560000,
         1.800000, 2.160000},
        {1.120000, 0.760000, 0.520000, 0.320000, 0.150000, 0.000000, 0.000000, 0.000000, 0.140000,
         0.260000, 0.390000, 0.520000, 0.640000, 0.780000, 0.910000, 1.060000, 1.230000, 1.430000,
         1.670000, 2.030000},
        {1.250000, 0.890000, 0.650000, 0.450000, 0.280000, 0.130000, 0.000000, 0.000000, 0.000000,
         0.120000, 0.250000, 0.380000, 0.500000, 0.640000, 0.770000, 0.920000, 1.090000, 1.290000,
         1.530000, 1.890000},
        {1.390000, 1.030000, 0.790000, 0.590000, 0.420000, 0.270000, 0.140000, 0.000000, 0.000000,
         0.000000, 0.130000, 0.260000, 0.380000, 0.520000, 0.650000, 0.800000, 0.970000, 1.170000,
         1.410000, 1.770000},
        {1.510000, 1.150000, 0.910000, 0.710000, 0.540000, 0.390000, 0.260000, 0.120000, 0.000000,
         0.000000, 0.000000, 0.130000, 0.250000, 0.390000, 0.520000, 0.670000, 0.840000, 1.040000,
         1.280000, 1.640000},
        {1.640000, 1.280000, 1.040000, 0.840000, 0.670000, 0.520000, 0.390000, 0.250000, 0.130000,
         0.000000, 0.000000, 0.000000, 0.120000, 0.260000, 0.390000, 0.540000, 0.710000, 0.910000,
         1.150000, 1.510000},
        {1.770000, 1.410000, 1.170000, 0.970000, 0.800000, 0.650000, 0.520000, 0.380000, 0.260000,
         0.130000, 0.000000, 0.000000, 0.000000, 0.140000, 0.270000, 0.420000, 0.590000, 0.790000,
         1.030000, 1.390000},
        {1.890000, 1.530000, 1.290000, 1.090000, 0.920000, 0.770000, 0.640000, 0.500000, 0.380000,
         0.250000, 0.120000, 0.000000, 0.000000, 0.000000, 0.130000, 0.280000, 0.450000, 0.650000,
         0.890000, 1.250000},
        {2.030000, 1.670000, 1.430000, 1.230000, 1.060000, 0.910000, 0.780000, 0.640000, 0.520000,
         0.390000, 0.260000, 0.140000, 0.000000, 0.000000, 0.000000, 0.150000, 0.320000, 0.520000,
         0.760000, 1.120000},
        {2.160000, 1.800000, 1.560000, 1.360000, 1.190000, 1.040000, 0.910000, 0.770000, 0.650000,
         0.520000, 0.390000, 0.270000, 0.130000, 0.000000, 0.000000, 0.000000, 0.170000, 0.370000,
         0.610000, 0.970000},
        {2.310000, 1.950000, 1.710000, 1.510000, 1.340000, 1.190000, 1.060000, 0.920000, 0.800000,
         0.670000, 0.540000, 0.420000, 0.280000, 0.150000, 0.000000, 0.000000, 0.000000, 0.200000,
         0.440000, 0.800000},
        {2.480000, 2.120000, 1.880000, 1.680000, 1.510000, 1.360000, 1.230000, 1.090000, 0.970000,
         0.840000, 0.710000, 0.590000, 0.450000, 0.320000, 0.170000, 0.000000, 0.000000, 0.000000,
         0.240000, 0.600000},
        {2.680000, 2.320000, 2.080000, 1.880000, 1.710000, 1.560000, 1.430000, 1.290000, 1.170000,
         1.040000, 0.910000, 0.790000, 0.650000, 0.520000, 0.370000, 0.200000, 0.000000, 0.000000,
         0.000000, 0.360000},
        {2.920000, 2.560000, 2.320000, 2.120000, 1.950000, 1.800000, 1.670000, 1.530000, 1.410000,
         1.280000, 1.150000, 1.030000, 0.890000, 0.760000, 0.610000, 0.440000, 0.240000, 0.000000,
         0.000000, 0.000000},
        {3.280000, 2.920000, 2.680000, 2.480000, 2.310000, 2.160000, 2.030000, 1.890000, 1.770000,
         1.640000, 1.510000, 1.390000, 1.250000, 1.120000, 0.970000, 0.800000, 0.600000, 0.360000,
         0.000000, 0.000000}};

    /**
     * Constructor.
     */
    public SAXAlphabet() {
        super();
    }

    /**
     * {@inheritDoc}
     *
     * @param size
     * @return
     * @throws java.lang.Exception
     */
    public static double[] getCuts(short size) throws Exception {
        switch (size) {
            case 2:
                return case2.clone();
            case 3:
                return case3.clone();
            case 4:
                return case4.clone();
            case 5:
                return case5.clone();
            case 6:
                return case6.clone();
            case 7:
                return case7.clone();
            case 8:
                return case8.clone();
            case 9:
                return case9.clone();
            case 10:
                return case10.clone();
            case 11:
                return case11.clone();
            case 12:
                return case12.clone();
            case 13:
                return case13.clone();
            case 14:
                return case14.clone();
            case 15:
                return case15.clone();
            case 16:
                return case16.clone();
            case 17:
                return case17.clone();
            case 18:
                return case18.clone();
            case 19:
                return case19.clone();
            case 20:
                return case20.clone();
            case 32:
                return case32.clone();
            case 64:
                return case64.clone();
            case 128:
                return case128.clone();
            case 256:
                return case256.clone();
            case 512:
                return case512.clone();

            default:
                System.out.println(size);
                throw new Exception("Invalid alphabet size.");
        }
    }

    /**
     * {@inheritDoc}
     */
    public Integer getMaxSize() {
        return MAX_SIZE;
    }

    public double[][] getDistanceMatrix(Integer size) throws Exception {
        switch (size) {
            case 2:
                return distance_case2.clone();
            case 3:
                return distance_case3.clone();
            case 4:
                return distance_case4.clone();
            case 5:
                return distance_case5.clone();
            case 6:
                return distance_case6.clone();
            case 7:
                return distance_case7.clone();
            case 8:
                return distance_case8.clone();
            case 9:
                return distance_case9.clone();
            case 10:
                return distance_case10.clone();
            case 11:
                return distance_case11.clone();
            case 12:
                return distance_case12.clone();
            case 13:
                return distance_case13.clone();
            case 14:
                return distance_case14.clone();
            case 15:
                return distance_case15.clone();
            case 16:
                return distance_case16.clone();
            case 17:
                return distance_case17.clone();
            case 18:
                return distance_case18.clone();
            case 19:
                return distance_case19.clone();
            case 20:
                return distance_case20.clone();
            default:
                throw new Exception("Invalid alphabet size.");
        }
    }

    public static short[] GetSymbol(double[] PAA, short Card) throws Exception {
        boolean FOUND = false;
        short[] symbols = new short[PAA.length];

        for(int i = 0; i < PAA.length; i++) {
            for(int j = 0; j < Card - 1; j++) {
                if(PAA[i] <= getCuts(Card)[j]) {
                    symbols[i] = (short) j;
                    FOUND = true;
                    break;
                }
            }
            if(!FOUND) {
                symbols[i] = (short) (Card - 1);
            }
            FOUND = false;
        }
        return symbols;
    }

    public static short GetSymbol(double Means, short Card) throws Exception {
        boolean FOUND = false;
        short symbol = 0;
        for(int j = 0; j < Card - 1; j++) {
            if(Means <= getCuts(Card)[j]) {
                symbol = (short) j;
                FOUND = true;
                break;
            }
        }
        if(!FOUND) {
            symbol = (short) (Card - 1);
        }
        return symbol;

    }

    public static short[] GetSymbolBaseOnCardArray(double[] PAA, short[] Cards) throws Exception {
        boolean FOUND = false;
        short[] symbols = new short[PAA.length];

        for(int i = 0; i < PAA.length; i++) {
            for(int j = 0; j < Cards[i] - 1; j++) {
                if(PAA[i] <= getCuts(Cards[i])[j]) {
                    symbols[i] = (short) j;
                    //System.out.print(" \t symbols = "+symbols[i]+" PAA[i] = "+PAA[i]+"" );
                    FOUND = true;
                    break;
                }
            }
            //System.out.println("");
            if(!FOUND) {
                symbols[i] = (short) (Cards[i] - 1);
            }
            FOUND = false;
        }
        return symbols;
    }

    public static short[] ConvertSAXBaseOnCardArray(double[] ts, int wordLen, short[] cards) throws Exception {
        double rem = Math.IEEEremainder(ts.length, wordLen);
        double[] PAA = new double[wordLen];

            // If the wordLen is not divisible by the length of time series, then 
        // find their GCD (greatest common divisor) and duplicate the time
        // series by this much (one number at a time).
        if(rem != 0) {
            int lcm = GetLCM(ts, wordLen);
            double[] ts_dup;// = new double[lcm];

            ts_dup = DupArray(ts, lcm / ts.length);

            PAA = Util.GetPAA(ts_dup, wordLen);
        } // If the length of time series is divisible by the number of segments,
        // then no replication is needed.  We can work directly on the original
        // time series
        else {

            PAA = Util.GetPAA(ts, wordLen);

        }

        return GetSymbolBaseOnCardArray(PAA, cards);
    }

    public static short[] ConvertSAX(double[] ts, int wordLen, short card) throws Exception {
        double rem = Math.IEEEremainder(ts.length, wordLen);
        double[] PAA = new double[wordLen];
        if(getCuts(card).length == 0) {
            throw new Exception("invalid alphabetsize");
        }
            //			min = 0;
        //			max = 0;

            // If the wordLen is not divisible by the length of time series, then 
        // find their GCD (greatest common divisor) and duplicate the time
        // series by this much (one number at a time).
        if(rem != 0) {
            int lcm = GetLCM(ts, wordLen);
            double[] ts_dup;// = new double[lcm];

            ts_dup = DupArray(ts, lcm / ts.length);

            PAA = Util.GetPAA(ts_dup, wordLen);
        } // If the length of time series is divisible by the number of segments,
        // then no replication is needed.  We can work directly on the original
        // time series
        else {

            PAA = Util.GetPAA(ts, wordLen);

        }

        return GetSymbol(PAA, card);
    }

    public static double[] DupArray(double[] data, int dup) {
        int cur_index = 0;
        double[] dup_array = new double[data.length * dup];

        for(int i = 0; i < data.length; i++) {
            for(int j = 0; j < dup; j++) {
                dup_array[cur_index + j] = data[i];
            }

            cur_index += dup;
        }
        return dup_array;
    }
     // Get the GCD (greatest common divisor) between the
    // length of the time series and the number of PAA
    // segments

    private static int GetGCD(double[] time_series, int num_seg) {
        int u = time_series.length;
        int v = num_seg;
        int div;
        int divisible_check;

        while(v > 0) {
            div = (int) Math.floor((double) u / (double) v);
            divisible_check = u - v * div;
            u = v;
            v = divisible_check;
        }
        return u;
    }

    // Get the least common multiple of the length of the time series and the
    // number of segments
    private static int GetLCM(double[] time_series, int num_seg) {
        int gcd = GetGCD(time_series, num_seg);
        int len = time_series.length;
        int n = num_seg;
        return (len * (n / gcd));
    }

}
